#include <LiquidCrystal.h>
LiquidCrystal lcd (23, 22, 21, 19, 18, 5);

#define CICLOS         100
#define TENSAO_F       3.3
#define A_TRANS        10000000
#define A_TENSAO       4.3
#define RESPONS        0.04
#define AREA_ATV       0.00076
#define CONSTANT       (A_TENSAO*A_TRANS*RESPONS*AREA_ATV)

#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

#include <iostream>
#include <string>

BLECharacteristic *pCharacteristic;
 
bool deviceConnected = false;
const int LED = 2;

#define SERVICE_UUID           "6E400001-B5A3-F393-E0A9-E50E24DCCA9E" // UART service UUID
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define DHTDATA_CHAR_UUID      "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
    };
    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
    }
};

class MyCallbacks: public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
      std::string rxValue = pCharacteristic->getValue();
      Serial.println(rxValue[0]);
 
      if (rxValue.length() > 0) {
        Serial.println("*********");
        Serial.print("Received Value: ");
 
        for (int i = 0; i < rxValue.length(); i++) {
          Serial.print(rxValue[i]);
        }
        Serial.println();
        Serial.println("*********");
      }
 
      // Processa o caracter recebido do aplicativo. Se for A acende o LED. B apaga o LED
      if (rxValue.find("A") != -1) { 
        Serial.println("Turning ON!");
        digitalWrite(LED, HIGH);
      }
      else if (rxValue.find("B") != -1) {
        Serial.println("Turning OFF!");
        digitalWrite(LED, LOW);
      }
    }
};

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(LED, OUTPUT);
  lcd.begin(16,2);

  // Create the BLE Device
  BLEDevice::init("UVC"); // nome do bluetooth

  // Configura o dispositivo como Servidor BLE
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Cria o servico UART
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Cria uma Característica BLE para envio dos dados
  pCharacteristic = pService->createCharacteristic(
                      DHTDATA_CHAR_UUID,
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
                       
  pCharacteristic->addDescriptor(new BLE2902());

  // cria uma característica BLE para recebimento dos dados
  BLECharacteristic *pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID_RX,
                                         BLECharacteristic::PROPERTY_WRITE
                                       );
 
  pCharacteristic->setCallbacks(new MyCallbacks());

  // Inicia o serviço
  pService->start();

  // Inicia a descoberta do ESP32
  pServer->getAdvertising()->start();
  Serial.println("Esperando uma conexão...");
}

void loop() {
  if (deviceConnected) {
    
    uint16_t sensorVal; //valor obtido do sensor
    uint32_t sensorS = 0;
    
    float sensorAvg, sensorTensao, intensidade, medidor;

    //averiguar os valores de várias leituras
      for (int i=0; i<CICLOS; i++) {
      sensorVal = analogRead (34);
      sensorS += sensorVal;
      delay (2);
      }
      
      sensorAvg = (float)sensorS / (float)CICLOS;
      
      //converter para tensão
      sensorTensao = sensorAvg * (TENSAO_F / 4096.0);  //1024.0 ----> 8b (esp8266)
      //sensorTensao = medidor - 0.01;                //4096.0 ----> 12b (esp32)
      //densidade é em mW/cm^2
      intensidade = sensorTensao*1000.0 / CONSTANT;
    
    if (isnan(intensidade)) {
      Serial.println("Falha na leitura");
    }
    else {
      Serial.print("Intensidade: ");
      Serial.print(intensidade);
      Serial.print("mW/cm²");
    }

      lcd.clear();              // Limpa o display
      lcd.setCursor(3, 0);      // 2 = 2 colunas para a direita. 0 = Primeira linha
      lcd.print("Luz UVC");     // Imprime um texto
      lcd.setCursor(0, 2);      // 2 = 2 colunas para a direita. 1 = Segunda linha
      lcd.print("Tensao: ");
      lcd.print(sensorTensao);
      lcd.print("V"); 
      delay(5000);              // 5 segundos de delay
  
      lcd.clear(); 
      lcd.setCursor(2, 0);
      lcd.print("Intensidade:");
      lcd.setCursor(2, 1);
      lcd.print(intensidade);
      lcd.print("mW/cm^2");  
      delay(1000);

    char intensidadeString[16];
    dtostrf(intensidade, 1, 2, intensidadeString);
    sprintf(intensidadeString, "%d", intensidade);

    pCharacteristic->setValue(intensidadeString);

    pCharacteristic->notify(); // Envia o valor para o aplicativo!
    Serial.print("*** Dado enviado: ");
    Serial.print(intensidadeString);
    Serial.println(" ***");
  }
  delay(5000);
}
