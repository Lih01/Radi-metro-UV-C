#include <WiFi.h>
#include <HTTPClient.h>
#include <LiquidCrystal.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

LiquidCrystal lcd (23, 22, 21, 19, 18, 5);

#define CICLOS         100
#define TENSAO_F       3.3
#define A_TRANS        10000000
#define A_TENSAO       4.3
#define RESPONS        0.04
#define AREA_ATV       0.00076
#define CONSTANT       (A_TENSAO * A_TRANS * RESPONS * AREA_ATV)

BLECharacteristic *pCharacteristic;
bool deviceConnected = false;
const int LED = 2;

// Configuração do WiFi
const char* ssid = "SUA_REDE_WIFI";   // Nome da Rede WiFi
const char* password = "SUA_SENHA";   // Senha do WiFi
const char* server = "api.thingspeak.com";  // Servidor do ThingSpeak
const String apiKey = "SUA_API_KEY";  //API Key do ThingSpeak (substitua pelo seu)

// Configuração do BLE
#define SERVICE_UUID           "6E400001-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define DHTDATA_CHAR_UUID      "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
    };
    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
    }
};

class MyCallbacks: public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
      std::string rxValue = pCharacteristic->getValue();

      if (rxValue.length() > 0) {
        Serial.print("Received Value: ");
        for (int i = 0; i < rxValue.length(); i++) {
          Serial.print(rxValue[i]);
        }
        Serial.println();
      }

      if (rxValue.find("A") != -1) { 
        Serial.println("Turning ON!");
        digitalWrite(LED, HIGH);
      }
      else if (rxValue.find("B") != -1) {
        Serial.println("Turning OFF!");
        digitalWrite(LED, LOW);
      }
    }
};

void setup() {
  Serial.begin(115200);
  pinMode(LED, OUTPUT);
  lcd.begin(16, 2);

  // Conectando ao WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando ao WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println(" Conectado ao WiFi!");

  // Inicialização do Bluetooth BLE
  BLEDevice::init("UVC");
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServer->createService(SERVICE_UUID);

  pCharacteristic = pService->createCharacteristic(
                      DHTDATA_CHAR_UUID,
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
                       
  pCharacteristic->addDescriptor(new BLE2902());

  BLECharacteristic *pCharacteristicRX = pService->createCharacteristic(
                                          CHARACTERISTIC_UUID_RX,
                                          BLECharacteristic::PROPERTY_WRITE
                                       );
 
  pCharacteristicRX->setCallbacks(new MyCallbacks());

  pService->start();
  pServer->getAdvertising()->start();
  Serial.println("Esperando uma conexão BLE...");
}

void loop() {
  if (deviceConnected) {
    uint16_t sensorVal;
    uint32_t sensorS = 0;
    float sensorAvg, sensorTensao, intensidade;

    // Leitura do Sensor
    for (int i = 0; i < CICLOS; i++) {
      sensorVal = analogRead(34);
      sensorS += sensorVal;
      delay(2);
    }
      
    sensorAvg = (float)sensorS / (float)CICLOS;
    sensorTensao = sensorAvg * (TENSAO_F / 4096.0);
    intensidade = sensorTensao * 1000.0 / CONSTANT;
    
    if (isnan(intensidade)) {
      Serial.println("Falha na leitura");
    } else {
      Serial.print("Intensidade: ");
      Serial.print(intensidade);
      Serial.println(" mW/cm²");
    }

    // Exibir no LCD
    lcd.clear();
    lcd.setCursor(3, 0);
    lcd.print("Luz UVC");
    lcd.setCursor(0, 1);
    lcd.print("Tensao: ");
    lcd.print(sensorTensao);
    lcd.print("V");
    delay(3000);

    lcd.clear();
    lcd.setCursor(2, 0);
    lcd.print("Intensidade:");
    lcd.setCursor(2, 1);
    lcd.print(intensidade);
    lcd.print("mW/cm^2");
    delay(2000);

    // Enviar para ThingSpeak
    if (WiFi.status() == WL_CONNECTED) {
      WiFiClient client;
      if (client.connect(server, 80)) {
        String url = "/update?api_key=" + apiKey + "&field1=" + String(intensidade);
        
        client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                     "Host: " + server + "\r\n" +
                     "Connection: close\r\n\r\n");
        client.stop();
        Serial.println("Dados enviados ao ThingSpeak!");
      } else {
        Serial.println("Falha ao conectar ao ThingSpeak.");
      }
    }

    // Enviar via Bluetooth BLE
    char intensidadeString[16];
    dtostrf(intensidade, 1, 2, intensidadeString);
    pCharacteristic->setValue(intensidadeString);
    pCharacteristic->notify();
    Serial.print("*** Dado enviado via BLE: ");
    Serial.print(intensidadeString);
    Serial.println(" ***");
  }

  delay(5000);
}
